# 🧠 Aspect-Based Sentiment Analysis (ABSA)

<div align="center">

![Python](https://img.shields.io/badge/Python-3.8+-blue.svg)
![PyTorch](https://img.shields.io/badge/PyTorch-1.9+-red.svg)
![License](https://img.shields.io/badge/License-MIT-green.svg)
![Status](https://img.shields.io/badge/Status-Complete-brightgreen.svg)

*Fine-grained sentiment analysis at the aspect level*

</div>

---

## 📖 Overview

This project implements **Aspect-Based Sentiment Analysis (ABSA)**, a sophisticated NLP task that goes beyond traditional sentiment analysis by identifying specific aspects within text and determining their individual sentiments.

### 🎯 Two-Stage Pipeline

<table>
<tr>
<td width="50%">

**🔍 Task 1: Aspect Term Extraction (ATE)**
- Identify opinion targets (aspects) in sentences
- Extract exact spans using sequence labeling
- BIO tagging scheme implementation

</td>
<td width="50%">

**💭 Task 2: Aspect Sentiment Classification (ASC)**
- Predict sentiment for each extracted aspect
- 4-class classification: positive, negative, neutral, conflict
- Attention-based neural architecture

</td>
</tr>
</table>

---

## 💡 Why ABSA Matters

Traditional sentiment analysis treats entire sentences as single units, but real-world text often contains **mixed sentiments** about different aspects.

### 📝 Example Analysis

```
"The food was excellent, but the service was disappointing."
```

| Aspect | Sentiment | Confidence |
|--------|-----------|------------|
| 🍽️ food | ✅ **positive** | 92% |
| 👥 service | ❌ **negative** | 87% |

**Applications**: Restaurant reviews, product feedback, social media monitoring, customer service analysis

---

## 📁 Project Architecture

```
📦 ABSA-Project/
│
├── 🔍 Task1/                          # Aspect Term Extraction
│   ├── 📊 Data Files
│   │   ├── train.json                 # Training dataset
│   │   ├── train.task1.json          # Processed training data
│   │   ├── test.json                 # Test dataset
│   │   ├── test_task1.json           # Processed test data
│   │   ├── val.json                  # Validation dataset
│   │   ├── val.task1.json            # Processed validation data
│   │   └── vocab_task1.json          # Vocabulary mapping
│   └── 📓 Aspect Term Extraction.ipynb
│
├── 💭 Task2/                          # Aspect Sentiment Classification
│   ├── 📊 Data Files
│   │   ├── train.json                # Training dataset
│   │   ├── train_task2.json          # Processed training data
│   │   ├── test.json                 # Test dataset
│   │   ├── test_task2.json           # Processed test data
│   │   ├── val.json                  # Validation dataset
│   │   ├── val_task2.json            # Processed validation data
│   │   └── vocab_task2.json          # Vocabulary mapping
│   └── 📓 Aspect Based Sentiment Analysis.ipynb
│
└── 📋 README.md                       # Project documentation
```

---

## 🔍 Task 1: Aspect Term Extraction (ATE)

<div align="center">

### 🎯 **Goal**: Extract exact aspect terms from sentences

</div>

### 🏗️ Architecture Overview

```mermaid
graph LR
    A[Input Sentence] --> B[Word Embeddings]
    B --> C[Bi-GRU/RNN]
    C --> D[Dense Layer]
    D --> E[BIO Tags]
    E --> F[Aspect Terms]
```

### ⚙️ Technical Specifications

| Component | Details |
|-----------|---------|
| **🧠 Architecture** | Bidirectional GRU/RNN |
| **📊 Embeddings** | GloVe 300D / fastText 300D |
| **🏷️ Tagging Scheme** | BIO (Beginning-Inside-Outside) |
| **📉 Loss Function** | CrossEntropyLoss with padding mask |
| **📏 Evaluation** | Chunk-level F1 Score (CoNLL eval) |

### 🏆 Performance Results

<div align="center">

| Model | Embedding | Validation F1 | Status |
|-------|-----------|---------------|---------|
| **🥇 GRU** | **fastText** | **0.7165** | 🌟 **Best** |
| 🥈 GRU | GloVe | 0.7092 | ⭐ |
| 🥉 RNN | fastText | 0.7013 | ⭐ |
| RNN | GloVe | 0.7000 | ⭐ |

**🎯 Final Test F1 Score: 0.7132**

</div>

---

## 💭 Task 2: Aspect Sentiment Classification (ASC)

<div align="center">

### 🎯 **Goal**: Predict sentiment for each extracted aspect

</div>

### 🏗️ Architecture Overview

```mermaid
graph TB
    A[Context + Aspect] --> B[GloVe Embeddings]
    B --> C[Bi-LSTM]
    C --> D[Aspect-Specific Attention]
    D --> E[Dense Layers]
    E --> F[4-Class Classification]
    F --> G[positive/negative/neutral/conflict]
```

### ⚙️ Technical Specifications

| Component | Details |
|-----------|---------|
| **🧠 Architecture** | Bi-LSTM + Aspect-Specific Attention |
| **📊 Embeddings** | GloVe 300D |
| **🎯 Input Format** | Context tokens + aspect term indices |
| **🔍 Attention Mechanism** | Focuses on aspect-relevant context |
| **📉 Loss Function** | CrossEntropyLoss |
| **📏 Evaluation Metric** | Classification Accuracy |

### 🏆 Performance Results

<div align="center">

| Metric | Score | Status |
|--------|-------|---------|
| **🎯 Validation Accuracy** | **65.23%** | 🌟 **Best** |
| **📊 Test Accuracy** | **62.50%** | ✅ **Final** |

</div>

